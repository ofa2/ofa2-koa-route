import _ from"lodash";import Router from"koa-router";import bodyParser from"koa-bodyparser";const router=Router();function lift(){this.app.use(bodyParser()),_.forEach((this.config.http||{}).middlewares||[],t=>{if(_.isFunction(t))this.app.use(t());else if(_.isArray(t)){let o=_.map(t,t=>_.isFunction(t)?t():t);this.app.use(o)}}),_.forEach(this.config.routes,(t,o)=>{let e,r,i=o.indexOf(" ");if(i>-1){let t=[o.slice(0,i),o.slice(i+1)];e=(t[0]||"").toLowerCase(),[,r]=t}else e="all",r=o;if(!_.includes(["all","get","post","put","delete","patch"],e))throw new Error(`invalid route method: ${e}`);if(_.isFunction(t))return void router[e](...[r].concat(t));let n=t.split("."),s=n[0],l=this.controllers[s];if(!l)throw new Error(`undefined controller: ${s}`);let c=n[1],a=l[c].bind(l);if(!a)throw new Error(`undefined action method: ${t}`);if("[object AsyncFunction]"!=={}.toString.call(a))throw new Error("controller function need be async");let u=this.controllerActionPolicies&&this.controllerActionPolicies[`${s}.${c}`]||[];router[e](...[r].concat(u).concat(function(t,...o){return a(...[t,...o]).then(o=>(t.body||(t.body=o),o)).catch(o=>{global.logger.warn(o),t.status=t.status||400})}))}),this.app.use(router.routes()),this.app.use(router.allowedMethods())}export default lift;
//# sourceMappingURL=bundle.esm.js.map
